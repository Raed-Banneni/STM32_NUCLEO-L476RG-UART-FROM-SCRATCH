
UART_RX_MODULAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ac  080004b4  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ac  080004ac  000104b4  2**0
                  CONTENTS
  4 .ARM          00000000  080004ac  080004ac  000104b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004ac  080004b4  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000104b4  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006ac  00000000  00000000  000104e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000214  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00010da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  00010e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1ef  00000000  00000000  00010ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c99  00000000  00000000  0002e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a21b6  00000000  00000000  0002ed58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d0f0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000019c  00000000  00000000  000d0f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000494 	.word	0x08000494

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000494 	.word	0x08000494

080001c8 <main>:



char key;
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	led_init();
 80001cc:	f000 f834 	bl	8000238 <led_init>
	uart2_rxtx_init();
 80001d0:	f000 f852 	bl	8000278 <uart2_rxtx_init>
	/*if you want to use the receive mode */

	while(1)
	{
		ledon();
 80001d4:	f000 f812 	bl	80001fc <ledon>
		key= uart2_read();
 80001d8:	f000 f8fa 	bl	80003d0 <uart2_read>
 80001dc:	4603      	mov	r3, r0
 80001de:	461a      	mov	r2, r3
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <main+0x30>)
 80001e2:	701a      	strb	r2, [r3, #0]
		if (key =='o')
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <main+0x30>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	2b6f      	cmp	r3, #111	; 0x6f
 80001ea:	d102      	bne.n	80001f2 <main+0x2a>

			ledon();
 80001ec:	f000 f806 	bl	80001fc <ledon>
 80001f0:	e7f0      	b.n	80001d4 <main+0xc>
		else
			ledoff();
 80001f2:	f000 f812 	bl	800021a <ledoff>
		ledon();
 80001f6:	e7ed      	b.n	80001d4 <main+0xc>
 80001f8:	2000001c 	.word	0x2000001c

080001fc <ledon>:
{
	uart2_write(ch);
	return (ch);
}
void ledon(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0

		GPIOA->ODR |=LED_PIN;
 8000200:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000204:	695b      	ldr	r3, [r3, #20]
 8000206:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020a:	f043 0320 	orr.w	r3, r3, #32
 800020e:	6153      	str	r3, [r2, #20]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr

0800021a <ledoff>:
void ledoff(void)
{
 800021a:	b480      	push	{r7}
 800021c:	af00      	add	r7, sp, #0

		GPIOA->ODR &=~LED_PIN;
 800021e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000222:	695b      	ldr	r3, [r3, #20]
 8000224:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000228:	f023 0320 	bic.w	r3, r3, #32
 800022c:	6153      	str	r3, [r2, #20]
}
 800022e:	bf00      	nop
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <led_init>:

void led_init(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
			RCC->AHB2ENR |=GPIOAEN;
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <led_init+0x3c>)
 800023e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000240:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <led_init+0x3c>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	64d3      	str	r3, [r2, #76]	; 0x4c
			GPIOA->MODER |=(1U<<10);
 8000248:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000256:	6013      	str	r3, [r2, #0]
			GPIOA->MODER &=~(1U<<11);
 8000258:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000

08000278 <uart2_rxtx_init>:
void uart2_rxtx_init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	/*********************configure uart gpio pin*********************/

	/*enable clock access to gpioa*/
	RCC->AHB2ENR |=GPIOAEN;
 800027c:	4b3e      	ldr	r3, [pc, #248]	; (8000378 <uart2_rxtx_init+0x100>)
 800027e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000280:	4a3d      	ldr	r2, [pc, #244]	; (8000378 <uart2_rxtx_init+0x100>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	64d3      	str	r3, [r2, #76]	; 0x4c

	/*set PA2 to alternate function*/
	GPIOA->MODER &=~(1U<<4);
 8000288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000292:	f023 0310 	bic.w	r3, r3, #16
 8000296:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF7)*/
	GPIOA->AFR[0] |=(1U<<8);
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ac:	6a1b      	ldr	r3, [r3, #32]
 80002ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80002b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002bc:	6a1b      	ldr	r3, [r3, #32]
 80002be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002cc:	6a1b      	ldr	r3, [r3, #32]
 80002ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80002d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002dc:	6a1b      	ldr	r3, [r3, #32]
 80002de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002e6:	6213      	str	r3, [r2, #32]


	/*set PA3 to alternate function*/
	GPIOA->MODER &=~(1U<<6);
 80002e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002f6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<7);
 80002f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000306:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF7)*/
		GPIOA->AFR[0] |=(1U<<12);
 8000308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030c:	6a1b      	ldr	r3, [r3, #32]
 800030e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000312:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000316:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=(1U<<13);
 8000318:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800031c:	6a1b      	ldr	r3, [r3, #32]
 800031e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000322:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000326:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |=(1U<<14);
 8000328:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800032c:	6a1b      	ldr	r3, [r3, #32]
 800032e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000336:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &=~(1U<<15);
 8000338:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800033c:	6a1b      	ldr	r3, [r3, #32]
 800033e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000342:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000346:	6213      	str	r3, [r2, #32]


	/***********************Configure uart module **********************/

	/*Enable clock access to uart2 */
	RCC->APB1ENR1 |=UART2EN;
 8000348:	4b0b      	ldr	r3, [pc, #44]	; (8000378 <uart2_rxtx_init+0x100>)
 800034a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800034c:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <uart2_rxtx_init+0x100>)
 800034e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000352:	6593      	str	r3, [r2, #88]	; 0x58

	/*configure baud rate*/

	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000358:	4908      	ldr	r1, [pc, #32]	; (800037c <uart2_rxtx_init+0x104>)
 800035a:	4809      	ldr	r0, [pc, #36]	; (8000380 <uart2_rxtx_init+0x108>)
 800035c:	f000 f812 	bl	8000384 <uart_set_baudrate>

	/*configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <uart2_rxtx_init+0x108>)
 8000362:	220c      	movs	r2, #12
 8000364:	601a      	str	r2, [r3, #0]

	/*enable uart module*/
	USART2->CR1 |=CR1_UE;
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <uart2_rxtx_init+0x108>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a05      	ldr	r2, [pc, #20]	; (8000380 <uart2_rxtx_init+0x108>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6013      	str	r3, [r2, #0]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	04c4b400 	.word	0x04c4b400
 8000380:	40004400 	.word	0x40004400

08000384 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx , uint32_t periph_clk,uint32_t bauderate)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	60f8      	str	r0, [r7, #12]
 800038c:	60b9      	str	r1, [r7, #8]
 800038e:	607a      	str	r2, [r7, #4]
	USARTx->BRR =compute_uart_bd(periph_clk,bauderate);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	68b8      	ldr	r0, [r7, #8]
 8000394:	f000 f808 	bl	80003a8 <compute_uart_bd>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	60da      	str	r2, [r3, #12]
}
 80003a0:	bf00      	nop
 80003a2:	3710      	adds	r7, #16
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk , uint32_t baudrate)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	085a      	lsrs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	441a      	add	r2, r3
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80003c0:	b29b      	uxth	r3, r3
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
	...

080003d0 <uart2_read>:
	while (!(USART2->ISR & ISR_TXE)){}
	//write to transmit data register
	USART2->TDR = (ch & 0xFF);
}
char uart2_read(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	// make sure receive data register is empty
		while (!(USART2->ISR & ISR_RXNE)){}
 80003d4:	bf00      	nop
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <uart2_read+0x24>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d0f9      	beq.n	80003d6 <uart2_read+0x6>
		//write to transmit data register
		return(USART2->RDR);
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <uart2_read+0x24>)
 80003e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003e6:	b29b      	uxth	r3, r3
 80003e8:	b2db      	uxtb	r3, r3
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	40004400 	.word	0x40004400

080003f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000400:	480c      	ldr	r0, [pc, #48]	; (8000434 <LoopForever+0x6>)
  ldr r1, =_edata
 8000402:	490d      	ldr	r1, [pc, #52]	; (8000438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000404:	4a0d      	ldr	r2, [pc, #52]	; (800043c <LoopForever+0xe>)
  movs r3, #0
 8000406:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000408:	e002      	b.n	8000410 <LoopCopyDataInit>

0800040a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800040a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800040c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040e:	3304      	adds	r3, #4

08000410 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000410:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000412:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000414:	d3f9      	bcc.n	800040a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000416:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000418:	4c0a      	ldr	r4, [pc, #40]	; (8000444 <LoopForever+0x16>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800041c:	e001      	b.n	8000422 <LoopFillZerobss>

0800041e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000420:	3204      	adds	r2, #4

08000422 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000422:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000424:	d3fb      	bcc.n	800041e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000426:	f000 f811 	bl	800044c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800042a:	f7ff fecd 	bl	80001c8 <main>

0800042e <LoopForever>:

LoopForever:
    b LoopForever
 800042e:	e7fe      	b.n	800042e <LoopForever>
  ldr   r0, =_estack
 8000430:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000438:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800043c:	080004b4 	.word	0x080004b4
  ldr r2, =_sbss
 8000440:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000444:	20000020 	.word	0x20000020

08000448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000448:	e7fe      	b.n	8000448 <ADC1_2_IRQHandler>
	...

0800044c <__libc_init_array>:
 800044c:	b570      	push	{r4, r5, r6, lr}
 800044e:	4d0d      	ldr	r5, [pc, #52]	; (8000484 <__libc_init_array+0x38>)
 8000450:	4c0d      	ldr	r4, [pc, #52]	; (8000488 <__libc_init_array+0x3c>)
 8000452:	1b64      	subs	r4, r4, r5
 8000454:	10a4      	asrs	r4, r4, #2
 8000456:	2600      	movs	r6, #0
 8000458:	42a6      	cmp	r6, r4
 800045a:	d109      	bne.n	8000470 <__libc_init_array+0x24>
 800045c:	4d0b      	ldr	r5, [pc, #44]	; (800048c <__libc_init_array+0x40>)
 800045e:	4c0c      	ldr	r4, [pc, #48]	; (8000490 <__libc_init_array+0x44>)
 8000460:	f000 f818 	bl	8000494 <_init>
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	10a4      	asrs	r4, r4, #2
 8000468:	2600      	movs	r6, #0
 800046a:	42a6      	cmp	r6, r4
 800046c:	d105      	bne.n	800047a <__libc_init_array+0x2e>
 800046e:	bd70      	pop	{r4, r5, r6, pc}
 8000470:	f855 3b04 	ldr.w	r3, [r5], #4
 8000474:	4798      	blx	r3
 8000476:	3601      	adds	r6, #1
 8000478:	e7ee      	b.n	8000458 <__libc_init_array+0xc>
 800047a:	f855 3b04 	ldr.w	r3, [r5], #4
 800047e:	4798      	blx	r3
 8000480:	3601      	adds	r6, #1
 8000482:	e7f2      	b.n	800046a <__libc_init_array+0x1e>
 8000484:	080004ac 	.word	0x080004ac
 8000488:	080004ac 	.word	0x080004ac
 800048c:	080004ac 	.word	0x080004ac
 8000490:	080004b0 	.word	0x080004b0

08000494 <_init>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr

080004a0 <_fini>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr
